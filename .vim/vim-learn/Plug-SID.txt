From vim-manual  usr_41
http://man.chinaunix.net/newsoft/vi/doc/usr_41.html

 21     if !hasmapto('<Plug>TypecorrAdd')
 22       map <unique> <Leader>a  <Plug>TypecorrAdd
 23     endif

我们先检查对 "<Plug>TypecorrAdd" 的映射是否存在。仅当不存在时我们才定义映射
"<Leader>a"。这样用户就可以在他自己的 vimrc 文件中加入:

        map ,c  <Plug>TypecorrAdd

那么键操作就会是 ",c" 而不是 "_a" 或者 "\a"了。


分 割

如果一个脚本变得相当长，你通常希望将其分割成几部分。你可以在其中使用函数或映射。
但同时又不希望它们在脚本之间相互干扰。例如，你定义了一个函数 Add()，但另一个脚本
也试图定一同名的函数。为了避免这样的情况发生，我们可以在本地函数的前面加上 "s:"。

我们来定义一个用来添加新的错误更正的函数:

 30     function s:Add(from, correct)
 31       let to = input("type the correction for " . a:from . ": ")
 32       exe ":iabbrev " . a:from . " " . to
 ..
 36     endfunction

这样我们就可以在这个脚本之内调用函数 s:Add()。如果另一个脚本也定义 s:Add()，该
函数将只能在其所定义的脚本内部被调用。还可能会存在独立于这两个函数的全局的
Add() 函数 (不带 "s:")。

<SID> 可以和映射一起使用，用来产生一个脚本的标识。在我们的错误更正插件中我们可
以做以下的定义:

 24     noremap <unique> <script> <Plug>TypecorrAdd  <SID>Add
 ..
 28     noremap <SID>Add  :call <SID>Add(expand("<cword>"), 1)<CR>

这样当用户键入 "\a" 时，将触发下面的次序:

        \a  ->  <Plug>TypecorrAdd  ->  <SID>Add  ->  :call <SID>Add()

如果另一个脚本也定义了映射 <SID>Add，该脚本将产生另一个脚本标示。所以它定义的映
射也与前面定义的不同。

注意 在这里我们用了 <SID>Add() 而不是 s:Add()。这是因为该映射将被用户键入，
因此是从脚本外部调用的。<SID> 被翻译成该脚本的标识。这样 Vim 就知道在那个脚本里
寻找相应的 Add() 函数了。

这的确是有点复杂，但又是使多个插件一起工作所必需的。基本规则是：在映射中使用
<SID>Add()；在其它地方 (该脚本内部，自动命令，用户命令) 使用 s:Add()。

我们还可以用同一个映射来添加一个菜单选项:

 26     noremenu <script> Plugin.Add\ Correction      <SID>Add

建议把插件定义的菜单项都加入到 "Plugin" 菜单下。上面的情况只定义了一个菜单选项。
当有多个选项时，可以创建一个子菜单。例如，一个提供 CVS 操作的插件 可以添加
"Plugin.CVS" 子菜单，并在其中定义 "Plugin.CVS.checkin"， "Plugin.CVS.checkout"
等菜单项。

注意 为了避免其它映射引起麻烦，在第 28 行使用了 ":noremap"。比如有人可能
重新映射了 ":call"。在第 24 也用到了 ":noremap"，但我们又希望重新映射
"<SID>Add"。这就是为什么在这儿要用 "<script>"。这只允许定义脚本本地的映射。
|:map-<script>| 同样的道理在第 25 行也用了 ":noremenu"。|:menu-<script>|


<SID> 和 <Plug>                                                *using-<Plug>*

<SID> 和 <Plug> 都是用来避免映射的键序列和那些仅仅用于其它映射的映射起冲突。
注意 <SID> 和 <Plug> 的区别:

<Plug>  在脚本外部是可见的。它被用来定义那些用户可能定义映射的映射。<Plug> 是一个
        键盘输入之外的特殊代码。
        使用结构：<Plug> 脚本名 映射名，可以使得其它插件使用同样次序的字符来定义映
        射的几率变得非常小。在我们上面的例子中，脚本名是 "Typecorr"，映射名是 "Add"。
        结果是 "<Plug>TypecorrAdd"。 只有脚本名和映射名的第一个字符是大写的，所以我
        们可以清楚地看到映射名从什么地方开始。

<SID>   是脚本的标识，用来唯一的代表一个脚本。Vim 在内部将 <SID> 翻译为
        "<SNR>123_"，其中 "123" 可以是任何数字。这样一个函数 "<SID>Add()" 可能
        在一个脚本中被命名为 "<SNR>11_Add()"，而在另一个脚本中被命名为
        "<SNR>22_Add()"。如果你用 ":function" 命令来获得系统中的函数列表你就可
        以看到了。映射中对 <SID> 的翻译是完全一样的。这样你才有可能通过一个映射
        来调用某个脚本中的本地函数。



From  CSDN  Blog
vim中的plugin还是比较好写的，就和平时输入的命令类似。但是其中的<plug>和<SID>比较难搞，我对着手册看了一遍一遍又一遍，就是搞不懂。最后还是做了几个小实验才弄清楚。以下本节中script均表示plugin。

    <SID> 只在本script中有效，对于不同的script, <SID>是不同的值。

        <plug> 是全局有效，一般使用方法 <plug>ScriptnameFunction .执行后，<plug>会替换成某些键盘敲不出的字符，对于不同的script来说，<plug>都是一样的。它的作用是用来区别其他变量。

            <plug>ScriptnameFunction 是手册给出的命名方法，这样可以确保不会重复。其实如果能够确保不重复的话，可以用任意的字符串。但是既然写plugin, 就应该是发布到网上的，还是规规矩矩用这个命名方式好了。

                综上所述， 映射快捷键到 <plug>ScriptnameFunction 可以在script内或者外部都可以。但是需要保证在本script内映射 <plug>ScriptnameFunction 到 <SID>function，以及其他涉及<SID>的映射。

